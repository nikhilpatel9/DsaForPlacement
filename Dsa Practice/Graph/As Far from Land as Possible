class Solution {
public:
    vector<pair<int, int>> mvs{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dis(n, vector<int>(m, -1));
        queue<pair<int, int>> q;
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < m; ++j) {
                if(grid[i][j] == 1) {
                    q.push({i, j});
                    dis[i][j] = 0;
                }
            }
        }
        int ans = -1;
        while(!q.empty()) {
            auto it = q.front();
            q.pop();
            for(auto x: mvs) {
                int xx = x.first + it.first;
                int yy = x.second + it.second;
                if(xx >= 0 && yy >= 0 && xx < n && yy < m && dis[xx][yy] == -1){
                    dis[xx][yy] = 1 + dis[it.first][it.second];
                    q.push({xx, yy});
                    ans = max(ans, dis[xx][yy]);
                }
            }
        }
        return ans;
    }
};
