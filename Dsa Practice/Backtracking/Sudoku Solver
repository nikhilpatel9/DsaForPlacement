class Solution {
public:

    bool isSafe(int row, int col,vector<vector<char>>& board, char value)
    {
        int n = board.size();
        for(int i = 0; i < n; i++)
        {
            //row
            if(board[row][i] == value)
            {
                return false;
            }
            //col
            if(board[i][col] == value)
            {
                return false;
            }
            //box
            if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)] == value)
            {
                return false;
            } 
        }
        return true; 
    }

    bool solve(vector<vector<char>>& board)
    {int n = board.size(); 
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j<n; j++)
        {
            //empty cell check
            if(board[i][j] == '.')
            {
                for(char val = '1'; val<= '9'; val++)
                {
                    //safe 
                    if(isSafe(i,j, board, val))
                    {
                        board[i][j] = val;
                        bool nextsol = solve(board);
                        if(nextsol == true)
                        {
                            return true;
                        }
                        board[i][j] = '.';
                    }

                }
                return false; 
            }
  
        }
      
    }
    return true; 
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
