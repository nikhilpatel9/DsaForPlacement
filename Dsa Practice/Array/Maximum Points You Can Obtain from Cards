class Solution {
public:
    int solve(vector<int>&card,int i,int j,int k,vector<vector<vector<int>>>&dp){
        if(i>j) return 0;
        if(k==0) return 0;
        if(dp[i][j][k]!=-1) return dp[i][j][k];
        int take=0,notTake=0;
        take=card[i]+solve(card,i+1,j,k-1,dp);
        notTake=card[j]+solve(card,i,j-1,k-1,dp);
        return dp[i][j][k]=max(take,notTake);
    }
    int maxScore(vector<int>& cardPoints, int k) {
     int n = cardPoints.size();
        int total = 0;
        for (int i = 0; i < k; i++) {
            total += cardPoints[i];
        }
        int maxScore = total;
      for (int i = 0; i < k; i++) {
            total = total - cardPoints[k - 1 - i] + cardPoints[n - 1 - i];
            maxScore = max(maxScore, total);
        }
        return maxScore;
    }
};
