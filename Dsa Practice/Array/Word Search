class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == word[0]) {
                    vector<vector<int>> dp(n, vector<int>(m, 0));
                    if (dfs(board, word, i, j, 0, dp)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

private:
    bool dfs(vector<vector<char>>& board, const string& word, int i, int j, int k, vector<vector<int>>& dp) {
        int n = board.size();
        int m = board[0].size();

        if (i < 0 || j < 0 || i >= n || j >= m || dp[i][j] || board[i][j] != word[k]) {
            return false;
        }

        if (k == word.size() - 1) {
            return true;
        }

        dp[i][j] = 1;

       
        int row[] = {-1, 0, 1, 0};
        int col[] = {0, 1, 0, -1};

        for (int l = 0; l < 4; l++) {
            int r = i + row[l];
            int c = j + col[l];

            if (dfs(board, word, r, c, k + 1, dp)) {
                return true;
            }
        }

        dp[i][j] = 0; 
        return false;
    }
};
