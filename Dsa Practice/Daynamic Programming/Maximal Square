class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int n=matrix.size(),m=matrix[0].size();
        vector<vector<int>>row(n,vector<int>(m,0));
        int mx=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                row[i][j]=matrix[i][j]-'0';

                if(i>0 and row[i][j]==1){
                    row[i][j]+=row[i-1][j];
                }
                cout<<row[i][j]<<" ";
            }
            cout<<endl;
        }
        for(int i=0;i<n;i++){
            stack<int>st;
            st.push(0);
            for(int j=1;j<m;j++){
                while(!st.empty() and row[i][st.top()]>row[i][j]){
                    int k=st.top();
                    st.pop();
                    int t=-1;
                    if(!st.empty()){
                        t=st.top();
                    }
                    mx=max(min(row[i][k],(j-t-1)),mx);
                }
                st.push(j);
            }
            int j=m;
            while(!st.empty() and row[i][st.top()]>0){
                    int k=st.top();
                    st.pop();
                    int t=-1;
                    if(!st.empty()){
                        t=st.top();
                    }
                    mx=max(min(row[i][k],(j-t-1)),mx);
                }
        }
        
        return mx*mx;
    }
};
