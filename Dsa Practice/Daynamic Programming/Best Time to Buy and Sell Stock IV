class Solution {
public:
    int solve(int i,bool buy,int k,vector<int>&price,vector<vector<vector<int>>>&dp){
        if(i>=price.size()) return 0;
        if(k<=0) return 0;
        if(dp[i][k][buy]!=-1) return dp[i][k][buy];
        int take=0,notTake=0;
        if(buy){
             take=-price[i]+solve(i+1,0,k,price,dp);
             notTake=solve(i+1,1,k,price,dp);
            
        }else{
             take=price[i]+solve(i+1,1,k-1,price,dp);
             notTake=solve(i+1,0,k,price,dp);
            
        }
      return dp[i][k][buy]=max(take,notTake);
    }
    int maxProfit(int k, vector<int>& prices) {
        vector<vector<vector<int>>>dp(prices.size()+1,vector<vector<int>>(k+1,vector<int>(2,-1)));
        return solve(0,1,k,prices,dp);
    }
};
