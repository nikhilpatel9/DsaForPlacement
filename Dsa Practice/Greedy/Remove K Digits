class Solution {
public:
    void solve(int i,string &s,string num,int k,int t){
        if(i>num.size()) return ;
        if(t>k){
            return ;
        }
        string take,notTake;
        if(t<k)
           s+=num[i];
           solve(i+1,s,num,k,t);
        solve(i+1,s,num,k,t+1);
        //s=min(take,notTake);
        
    }
    string removeKdigits(string num, int k) {
        deque<char>dq;
        for(int i=0;i<num.length();i++){
            while(!dq.empty() and dq.back()>num[i] and k>0){
                dq.pop_back();
                k--;
            }
            dq.push_back(num[i]);
        }
        while(k>0){
            dq.pop_back();
            k--;
        }
        string ans;
        while(!dq.empty()){
            ans+=dq.back();
            dq.pop_back();
        }
        while(ans.length()>0 and ans[ans.length()-1]=='0'){
            ans.pop_back();
        }
        reverse(ans.begin(),ans.end());
        if(ans.length()==0) ans+='0';
        return ans;
    }
};
