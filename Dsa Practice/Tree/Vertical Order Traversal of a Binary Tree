/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#define adj vector<pair<int, int>>

class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, adj> mp;
        stack<pair<TreeNode*, pair<int, int>>> q;
        q.push({root, {0, 0}});
        
        while (!q.empty()) {
            TreeNode* ptr = q.top().first;
            int k = q.top().second.first; 
            int t = q.top().second.second; 
            q.pop();
            
            mp[k].push_back({t, ptr->val});
            
            if (ptr->left) {
                q.push({ptr->left, {k - 1, t + 1}});
            }
            if (ptr->right) {
                q.push({ptr->right, {k + 1, t + 1}});
            }
        }
        
        vector<vector<int>> ans;
        for (auto& e : mp) {
            sort(e.second.begin(), e.second.end()); 
            vector<int> column;
            for (auto& p : e.second) {
                column.push_back(p.second);
            }
            ans.push_back(column);
        }
        return ans;
    }
};
